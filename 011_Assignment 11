                                      GRID IN CSS ASSIGNMENT
1.Create an image gallery using a CSS grid.
index.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" href="style.css" />
<title>Image Gallary</title>
</head>
<body>
<div class="photo-gallery">
<div class="photo-1">
<img
src="https://images.pexels.com/photos/276267/pexels-photo-276267.jpeg?
auto=compress&cs=tinysrgb&w=600"
alt="image-01"
/>
</div>
<div class="photo-2">
<img
src="https://images.pexels.com/photos/34299/herbs-flavoring-seasoning-cooking.jpg?
auto=compress&cs=tinysrgb&w=600"
alt="image-02"
/>
</div>
<div class="photo-3">
<img

src="https://images.pexels.com/photos/159045/the-interior-of-the-repair-interior-
design-159045.jpeg?auto=compress&cs=tinysrgb&w=600"

alt="image-03"
/>
</div>
<div class="photo-4">
<img
src="https://images.pexels.com/photos/4033148/pexels-photo-4033148.jpeg?
auto=compress&cs=tinysrgb&w=600"
alt="image-04"
/>
</div>
<div class="photo-5">
<img
src="https://images.pexels.com/photos/6074935/pexels-photo-6074935.jpeg?
auto=compress&cs=tinysrgb&w=600"
alt="img-5"
/>
</div>
<div class="photo-6">
<img
src="https://images.pexels.com/photos/4210610/pexels-photo-4210610.jpeg?
auto=compress&cs=tinysrgb&w=600"
alt="image-6"
/>
</div>
</div>
</body>
</html>
style.css
.photo-gallery {
display: grid;
grid-template-columns: repeat(3, 1fr);
grid-template-rows: repeat(3, 250px);
gap: 20px;
padding: 20px;
}
.photo-1 {
grid-column-start: 1;
grid-column-end: 3;
grid-row-start: 1;
grid-row-end: 2;
}
.photo-2 {
grid-column-start: 2;
grid-column-end: 3;
grid-row-start: 2;
grid-row-end: 3;
}
.photo-3 {
grid-column-start: 3;
grid-column-end: 4;
grid-row-start: 1;
grid-row-end: 2;
}
.photo-4 {
grid-column-start: 1;
grid-column-end: 2;
grid-row-start: 2;
grid-row-end: 4;
}
.photo-5 {
grid-column-start: 2;
grid-column-end: 3;
grid-row-start: 3;
grid-row-end: 4;
}
.photo-6 {
grid-column-start: 3;
grid-column-end: 4;
grid-row-start: 2;
grid-row-end: 4;
}
img {
height: 100%;
width: 100%;
border-radius: 10px;
}


2.Write code to arrange containers with texts A, B, C, and D as shown in the below image.
index.html
<div class="container">
<div class="box boxa">A</div>
<div class="box boxb">B</div>
<div class="box boxc">C</div>
<div class="box boxd">D</div>
</div>
index.css
.container {
display: grid;
grid-gap: 10px;
grid-template-columns: 100px 100px 100px;
}
.box {
background-color: bisque;
color: #fff;
border-radius: 5px;
padding: 20px;
font-size: 150%;
color: black;
}
.boxa {
grid-column: 1 / 3;
grid-row: 1;
}
.boxb {
grid-column: 3;
grid-row: 1 / 3;
}
.boxc {
grid-column: 1;
grid-row: 2;
}
.boxd {
grid-column: 2;
grid-row: 2;
}

3.Explain the use of grid-auto-row and grid-auto-column using code examples.
In CSS Grid Layout, grid-auto-rows and grid-auto-columns control the size of grid items that are placed outside the explicitly defined grid areas:
grid-auto-rows: Sets the size of rows that are implicitly created. When grid items are placed in rows beyond the defined rows, this property determines their size.
grid-auto-columns: Sets the size of columns that are implicitly created. When grid items are placed in columns beyond the defined columns, this property determines their size.
Both properties help manage how additional grid items are sized when the grid expands beyond the explicitly defined rows and columns.
     EXAMPLE
index.html
<div class="container">
<div>Item 1</div>
<div>Item 2</div>
<div>Item 3</div>
<div>Item 4</div>
</div>
index.css
.container {
display: grid;
grid-template-areas: "X X";
grid-template-rows: 50px;
grid-auto-rows: 200px;
}
.container > div {
border: 1px solid black;
background-color: bisque;
padding: 5px;
}

4.Write CSS to show numbers as shown in the figure, without altering the html file.
index.css
body {
margin: 40px;
}
.box {
background-color: #444;
color: #fff;
border-radius: 5px;
padding: 20px;
font-size: 150%;
order: 1;
}
.box:nth-child(even) {
background-color: #ccc;
color: #000;
}
.container {
width: 600px;
display: grid;
grid-template-columns: repeat(6, 100px);
grid-gap: 10px;
}
.box1 {
order: 3;
}
.box2 {
order: 6;
}
.box8 {
order: 2;
}


5.Explain the difference between justify-items and justify-self using code examples.
The main difference between them is that justify-items apply to grid containers and justify-self applies to grid-
items.
for example:
index.html
<div class="container">
<div class="box1">Box 1</div>
<div class="box2">Box 2</div>
<div class="box3">Box 3</div>
<div class="box4">Box 4</div>
<div class="box5">Box 5</div>
<div class="box6">Box 6</div>
</div>
index.css
.container {
display: grid;
grid-template-columns: auto auto auto;
border: 1px solid black;
}
.container > div {
padding: 5px;
background-color: green;
border: 1px solid black;
}
when we apply justify-items:center on grid container,
index.css
.container {
...
justify-items: center;
}
Here's a summary of the difference between justify-items and justify-self in CSS Grid:
justify-items: Applies to the grid container. It controls the alignment of all grid items within their respective grid cells along the horizontal axis. For example, with justify-items: center; applied to .container, all the items (boxes) will be horizontally centered within their cells.
justify-self: Applies to individual grid items. It overrides the alignment for that specific item within its grid cell. For example, if you set justify-self: end; on a specific box, it will align that box to the end of its cell, even if justify-items on the container is set to center.
In the case, justify-items: center; centers all boxes horizontally, while justify-self: start; on .box1 aligns just that specific box to the start of its cell.
